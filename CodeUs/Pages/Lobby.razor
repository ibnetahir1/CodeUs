@page "/lobby"
@using CodeUs.Hubs;
@using CodeUs.Shared.Models;
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager navigationManager
@inject Shared.StateContainers.PlayInfoContainer playInfoContainer
@inject Shared.StateContainers.IRoomsService roomsService
@inject Shared.StateContainers.IWordsService wordsService
@inject ILogger<Lobby> logger

<h1>current user: @_currentUserName</h1>
<h1>room code: @_currentRoomCode</h1>

<div class="players-and-settings-container">
    <div class="player-list">
        <div class="player-list-header"> Players </div>

        @if(_players != null)
        {
            Player? currentPlayer = roomsService.GetPlayer(_currentUserName!, _currentRoomCode!);
            <ul class="no-bullets">
                @foreach (var player in _players)
                {
                    string className = "";
                    if (player.IsReady)
                    {
                        className = "ready";
                    }
                    else
                    {
                        className = "not-ready";
                    }

                    string removeDisabled = "";
                    if (currentPlayer != null && currentPlayer.IsHost)
                    {
                        removeDisabled = "remove-not-disabled";
                    }
                    else
                    {
                        removeDisabled = "remove-disabled";
                    }

                    <li class="@removeDisabled player-and-ready-container" @onclick="@(() => RemovePlayer(player.Name))">
                        <span class="@className ready-icon">@player.Name</span>
                        
                    </li>
                }
            </ul>
        }

        <div class="ready-button-container">
            <button class="ready-button" @onclick="ToggleReady">Ready</button>
        </div>
    </div>

    <div class="game-settings">
        <EditForm Model="@_gameSettings" OnValidSubmit="@HandleGameStart">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="radio-input-container">
                <h5>Select Word Pack</h5>
                <InputRadioGroup @bind-Value="@_gameSettings.Pack">
                    <label class="pack-radio">
                        <InputRadio class="form-check-input" Value="Packs.Default" />
                        Default
                    </label>
                    <label class="pack-radio">
                        <InputRadio class="form-check-input" Value="Packs.Custom" disabled="true"/>
                        Custom
                    </label>
                </InputRadioGroup>
            </div>

            <div>
                <label>Number of words</label>
                <InputSelect @bind-Value="_gameSettings.NumberOfWords">
                    <option value="25">25</option>
                    <option value="30">30</option>
                    <option value="35">35</option>
                    <option value="40">40</option>
                </InputSelect>

                <br />

                <label>Number of turns</label>
                <InputSelect @bind-Value="_gameSettings.NumberOfTurns">
                    <option value="5">5</option>
                    <option value="6">6</option>
                    <option value="7">7</option>
                    <option value="8">8</option>
                    <option value="9">9</option>
                    <option value="10">10</option>
                    <option value="11">11</option>
                    <option value="12">12</option>
                </InputSelect>
            </div>
        
            <button type="submit" disabled="@_isStartDisabled">Start</button>
        </EditForm>
    </div>
</div>

@code {
    private string? _currentUserName = "";
    private string? _currentRoomCode = "";

    private List<Player>? _players = new();

    private GameSettings _gameSettings = new();
    private List<string> _customList = new();

    private bool _isStartDisabled = true;

    [Inject]
    private HubConnection? HubConnection { get; set; }

    protected override void OnInitialized()
    {
        logger.LogInformation("Reached the lobby");
        _currentUserName = playInfoContainer?.Value?.Nickname;
        _currentRoomCode = playInfoContainer?.Value?.RoomCode;
        _players = roomsService.GetRoom(_currentRoomCode!)?.Players;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await EnterRoom();
        }
    }

    /// <summary>
    /// Runs when a new user joins the room
    /// </summary>
    /// <returns></returns>
    public async Task EnterRoom()
    {
        try
        {
            HubConnection!.On<Player>("Update", Update);

            HubConnection!.On<List<Word>>("GameStart", GameStart);

            HubConnection!.On<Player>("PlayerRemoved", PlayerRemoved);

            if(HubConnection!.State == HubConnectionState.Disconnected)
            {
                await HubConnection!.StartAsync();
            }

            await HubConnection.SendAsync("PlayerJoined", _currentUserName, _currentRoomCode);
        }
        catch(Exception e)
        {
            System.Diagnostics.Debug.Print($"couldn't start the hub client: {e.Message}");
        }

    }

    /// <summary>
    /// Tells the hub to remove this player from the lobby
    /// </summary>
    /// <param name="playerName"></param>
    /// <returns></returns>
    public async Task RemovePlayer(string playerName)
    {
        Player currentPlayer = roomsService.GetPlayer(_currentUserName!, _currentRoomCode!);
        if (currentPlayer.IsHost)
        {
            await HubConnection!.SendAsync("RemovePlayer", playerName, _currentRoomCode);
        }
    }

    /// <summary>
    /// Updates the state of the lobby after the hub makes a change
    /// </summary>
    /// <param name="player"></param>
    /// <returns></returns>
    private async Task Update(Player player)
    {
        _players = roomsService.GetRoom(_currentRoomCode!)?.Players;
        Player currentPlayer = roomsService.GetPlayer(_currentUserName!, _currentRoomCode!);

        bool allPlayersReady = _players!.All(x => x.IsReady);

        if (currentPlayer != null && currentPlayer.IsHost && _players!.Count > 2 && allPlayersReady)
    {
            _isStartDisabled = false;
        }
        else
        {
            _isStartDisabled = true;
        }
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Updates the state of the lobby after player is removed and sends the removed player
    /// back to the lobby
    /// </summary>
    /// <param name="player"></param>
    /// <returns></returns>
    private async Task PlayerRemoved(Player player)
    {
        await Update(player);

        if (player.Name == _currentUserName)
        {
            navigationManager.NavigateTo("/");
        }
    }

    /// <summary>
    /// Tells the hub to toggle the ready status of this player.
    /// </summary>
    /// <returns></returns>
    private async Task ToggleReady()
    {
        logger?.LogInformation($"Toggling ready for {_currentUserName}");
        await HubConnection!.SendAsync("ToggleReady", _currentUserName, _currentRoomCode);
    }

    /// <summary>
    /// Tells the hub to start the game with the current game settings.
    /// </summary>
    /// <returns></returns>
    private async Task HandleGameStart()
    {
        if(_gameSettings.Pack == Packs.Custom)
        {
            await HubConnection!.SendAsync("GameStart", _gameSettings, _currentRoomCode, _customList);
        }
        else
        {
            logger?.LogInformation("Sending GameStart request to the hub");
            await HubConnection!.SendAsync("GameStart", _gameSettings, _currentRoomCode, null);
        }
    }

    /// <summary>
    /// Updates wordsService's word list after hub gives us the list.
    /// </summary>
    /// <param name="wordList"></param>
    /// <returns></returns>
    private void GameStart(List<Word> wordList)
    {
        logger?.LogInformation("Hub is trying to redirect to the game");
        wordsService.Words = wordList;
        navigationManager.NavigateTo("/game");
    }
}